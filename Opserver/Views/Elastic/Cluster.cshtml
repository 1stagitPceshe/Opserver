@using System.Globalization
@using StackExchange.Opserver.Data.Elastic
@using StackExchange.Opserver.Views.Elastic
@model DashboardModel
@{
    var c = Model.Current.Cluster;
    if (c == null) { return; }
    var nodes = c.Nodes.Data?.Nodes ?? new List<ElasticCluster.NodeInfo>();
}
<div>
    <h5 class="page-header">
        @c.IconSpan() @c.Name
        @Helpers.PollNow(c)
    </h5>
    <div class="row js-refresh" data-name="node-summary">
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">Stats</div>
                <div class="panel-body small">
                    @{
                        var gs = c.IndexStats.Data?.All;
                    }
                    @if (gs == null)
                    {
                        <div class="no-content">No Indexes Found</div>
                    }
                    else
                    {
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Documents?.Count.ToComma())">
                            @(gs?.Total?.Documents?.Count.ToComma() ?? "Unknown")
                            <label>Docs</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Documents?.Deleted.ToComma())">
                            @(gs.Total?.Documents?.Deleted.ToComma() ?? "Unknown")
                            <label>Deleted Docs</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Search?.QueryTotal.ToComma())">
                            @(gs?.Total?.Search?.QueryTotal.ToComma() ?? "Unknown")
                            <label>Searches</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs.Primaries.Store.SizeInBytes.ToSize())">
                            @(gs?.Total?.Store?.SizeInBytes.ToSize() ?? "Unknown")
                            <label>Size</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Indexing?.Total.ToComma())">
                            @(gs?.Total?.Indexing?.Total.ToComma() ?? "Unknown")
                            <label>Indexed</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Get?.Total.ToComma())">
                            @(gs?.Total?.Get?.Total.ToComma() ?? "Unknown")
                            <label>Gets</label>
                        </div>
                    }
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">@(c.Nodes?.Data?.Nodes?.Count.Pluralize("Node"))</div>
                <div class="panel-body small">
                    @foreach (var n in nodes)
                    {
                        var os = n.Stats?.OS;
                        var fs = n.Stats?.FileSystem;
                        var isMaster = c.State?.Data?.MasterNode == n.GUID;
                        var shards = c.AllShards.Where(sh => sh.Node == n.GUID).ToList();
                        <div class="row">
                            <h6 class="col-xs-12 page-header">
                                @n.IconSpan()
                                <a href="/elastic/node?node=@n.Name.UrlEncode()">
                                    @n.ShortName
                                </a>
                                @if (isMaster)
                                {
                                    <strong>
                                        (Master)
                                    </strong>
                                }
                                <span class="small text-muted">(@n.Version.ToString() - @n.GUID - <a href="#/elastic/summary/settings">View Settings</a>)</span>
                            </h6>
                            <div class="value-block col-md-2 col-sm-4 col-xs-6">
                                @if (os.UptimeInMilliseconds > 0)
                                {
                                    // TODO: Fix with matching fix in Elastic upgrade
                                    var upTime = TimeSpan.FromSeconds(os.UptimeInMilliseconds);
                                    <span title="@upTime.ToReadableString()">
                                        @upTime.ToTimeStringMini(3)
                                    </span>
                                }
                                else
                                {
                                    <span class="text-warning">Unknown</span>
                                }
                                <label>Uptime</label>
                            </div>
                            <div class="value-block col-md-2 col-sm-4 col-xs-6" title="System: @os.CPU.System.ToString()%, User: @os.CPU.User.ToString()%">
                                @if (os.CPU != null)
                                {
                                    var percentCpu = (100 - os.CPU.Idle).ToString();
                                    <div class="progress">
                                        <div class="progress-bar" style="width: @percentCpu%;"></div>
                                        <span>@percentCpu%</span>
                                    </div>
                                }
                                else
                                {
                                    <span class="text-warning">Unknown</span>
                                }
                                <label>CPU</label>
                            </div>
                            <div class="value-block col-md-2 col-sm-4 col-xs-6">
                                @if (os.Memory != null)
                                {
                                    var totalMemory = os.Memory.ActualFreeInbytes + os.Memory.ActualUsedInBytes;
                                    var percentMemoryUsed = 100 * os.Memory.ActualUsedInBytes / (decimal)totalMemory;
                                    var percentUsed = decimal.Round(percentMemoryUsed, 2).ToString(CultureInfo.InvariantCulture);
                                    <div class="progress">
                                        <div class="progress-bar" style="width: @percentUsed%;"></div>
                                        <span>@percentUsed%</span>
                                    </div>
                                }
                                else
                                {
                                    <span class="text-warning">Unknown</span>
                                }
                                <label title="Memory Used">Memory</label>
                            </div>
                            <div class="value-block col-md-2 col-sm-4 col-xs-6">
                                @if (fs != null)
                                {
                                    var total = fs.Data.Sum(d => d.TotalInBytes);
                                    var free = fs.Data.Sum(d => d.FreeInBytes);
                                    var percentUsed = decimal.Round(100*(decimal) (total - free)/total, 2).ToString(CultureInfo.InvariantCulture);
                                    <div class="progress">
                                        <div class="progress-bar" style="width: @percentUsed%;"></div>
                                        <span>@percentUsed%</span>
                                    </div>
                                }
                                else
                                {
                                    <span class="text-warning">Unknown</span>
                                }
                                <label title="Space Used">Space</label>
                            </div>
                            <div class="value-block col-md-2 col-sm-4 col-xs-6">
                                @shards.Count.ToComma() (@shards.Count(s => s.Primary).ToComma())
                                <label>Shards</label>
                            </div>
                            <div class="value-block col-md-2 col-sm-4 col-xs-6">
                                @(n?.Network?.PrimaryInterface?.Address)
                                <label>Listener</label>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">Indexes <span class="small text-muted">(<a href="#/elastic/summary/indices">View Detail</a>)</span></div>
                <div class="panel-body small">
                    @{
                        var indexes = c?.HealthStatus?.Data?.Indices?.Values;
                        var indexStats = c.IndexStats.Data?.Indices;
                        if (indexStats?.Count > 0 && indexes != null && indexes.Any())
                        {
                            <table class="table table-striped table-hover table-super-condensed">
                                <thead>
                                    <tr>
                                        <th>Index</th>
                                        <th>Searches</th>
                                        <th>Docs <span class="text-muted">(Size) xCount</span></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var i in indexes.OrderByWorst().ThenBy(i => { int j; return int.TryParse(i.Name, out j) ? j : 0; }).ThenBy(i => i.Name))
                                    {
                                        ElasticCluster.IndexStatsInfo.IndexStats indexStat;
                                        indexStats.TryGetValue(i.Name, out indexStat);
                                        var alias = c.GetIndexAliasedName(i.Name);
                                        <tr title="Status: @i.Status
Name: @i.Name
Alias: @(alias == i.Name ? "none" : alias)
Shards: @i.NumberOfShards.ToComma()
Replicas: @i.NumberOfReplicas.ToComma()
Active: @i.ActiveShards.ToComma()
Active (Primary): @i.ActivePrimaryShards.ToComma()
Initializing: @i.InitializingShards.ToComma()
Relocating: @i.RelocatingShards.ToComma()
Unassigned: @i.UnassignedShards.ToComma() ">
                                            <td>
                                                @i.IconSpan()
                                                <a href="#/elastic/index/@i.Name/shards" class="@i.TextClass()">@alias</a>
                                            </td>
                                            @if (indexStat != null)
                                            {
                                                <td>@indexStat.Total.Search.QueryTotal.ToComma()</td>
                                                <td>@indexStat.Primaries.Documents.Count.ToComma() <span class="text-muted">(@indexStat.Primaries.Store.SizeInBytes.ToSize()) <span title="@i.NumberOfReplicas.Pluralize("replica")">x@(i.NumberOfReplicas + 1)</span></span></td>
                                            }
                                            else
                                            {
                                                <td colspan="2" class="text-muted">(no stats)</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div class="no-content">No stats available for existing indexes.</div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@switch (Model.Popup)
{
    case DashboardModel.Popups.Indices:
        @Html.Partial("Indices", Model)
        break;
}
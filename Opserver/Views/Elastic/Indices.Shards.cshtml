@using StackExchange.Opserver.Data.Elastic
@using StackExchange.Opserver.Views.Elastic
@model DashboardModel.CurrentData
@{
    Layout = null;
    var c = Model.Cluster;
    var i = Model.IndexName;
    var shards = (Model.WarningsOnly ? c.TroubledShards : c.AllShards).Where(s => i == null || s.Index == i).ToList();
}
@helper GetNodeName(string node, Dictionary<string, ElasticCluster.NodeInfo> nodes)
{
    if (node.IsNullOrEmpty())
    {
        <span class="text-muted">n/a</span>
        return;
    }
    ElasticCluster.NodeInfo result;
    if (nodes.TryGetValue(node, out result))
    {
        if (result.Name == Model.NodeName)
        {
            <b>@result.Name</b>
        }
        else
        {
            @result.Name
        }
        return;
    }
    <span class="text-muted">@node</span>
}

<h4 class="modal-title">
    @shards.Count.ToComma() Shards @(Model.WarningsOnly ? "in trouble" : "") on @c.HealthStatus.Data.TotalNodeCount.Pluralize("node") (@c.HealthStatus.Data.Name)
</h4>
@if (shards.Any() && c.Nodes.Data != null)
{
    var nodes = c.Nodes.Data.Nodes.ToDictionary(n => n.GUID);
    <table class="table table-striped table-hover table-responsive table-super-condensed">
        <thead>
            <tr>
                <th></th>
                <th>Index</th>
                <th>State</th>
                <th>Shard #</th>
                <th>Primary</th>
                <th>Node</th>
                <th>Relocating To</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in shards.OrderByWorst().ThenBy(s => { int j; return int.TryParse(s.Index, out j) ? j : 0; }).ThenBy(s => s.Shard).ThenByDescending(s => s.Primary))
            {
                <tr class="@s.RowClass()">
                    <td>@s.IconSpan()</td>
                    <td>@c.GetIndexAliasedName(s.Index)</td>
                    <td>@s.PrettyState</td>
                    <td>@s.Shard.ToString()</td>
                    <td>@(s.Primary ? "Yes" : "No")</td>
                    <td>@GetNodeName(s.Node, nodes)</td>
                    <td>@GetNodeName(s.RelocatingNode, nodes)</td>
                </tr>
            }
        </tbody>
    </table>
}
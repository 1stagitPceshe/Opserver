@using StackExchange.Opserver.Data.Elastic
@using StackExchange.Opserver.Views.Elastic
@model DashboardModel
@{
    var c = Model.Current.Cluster;
    var n = Model.Current.Node;
    if (n == null) { return; }
    var os = n.Stats.OS;
    var jvm = n.Stats.JVM;
    var fs = n.Stats.FileSystem;
    var transport = n.Stats.Transport;
    var cnd = c?.Nodes.Data?.Nodes.FirstOrDefault(nd => nd.GUID == n.GUID);
}
<div>
    <h5 class="page-header">
        <a href="/elastic">Elastic</a><span class="text-muted">:</span> @c.IconSpan() @c.Name<span class="text-muted">: </span> @n.ShortName
        @Helpers.PollNow(c)
    </h5>
    <p></p>
    <div class="row js-refresh" data-name="node-summary">
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">Summary for @n.GUID <span class="small text-muted">(<a href="#/elastic/summary/settings">View Settings</a>)</span></div>
                <div class="panel-body small">
                    <div class="value-block col-md-3 col-sm-6" title="Host: @n.Hostname
Transport: @n.Stats.TransportAddress">
                        @c.Name
                        <label>Cluster</label>
                    </div>
                    <div class="value-block col-md-3 col-sm-6">
                        @n.Version.ToString()
                        <label>Version</label>
                    </div>
                    <div class="value-block col-md-3 col-sm-6">
                        @(c.State?.Data?.MasterNode == n.GUID ? "Master" : "Slave")
                        <label>Role</label>
                    </div>
                    <div class="value-block col-md-3 col-sm-6">
                        @((c.Nodes?.Data?.Nodes?.Count - 1).ToString())
                        <label>Siblings</label>
                    </div>
                </div>
            </div>
            @if (os != null && (os.CPU != null || os.Memory != null || os.Swap != null))
            {
                <div class="panel panel-default">
                    <div class="panel-heading">System</div>
                    <div class="panel-body small">
                        @if (os.UptimeInMilliseconds > 0)
                        {
                            // Yeah, this API is bugged in 1.4
                            // TODO: Fix with matching fix in Elastic upgrade, I hope
                            var upTime = TimeSpan.FromSeconds(os.UptimeInMilliseconds);
                            <div class="value-block col-md-3 col-sm-6" title="@upTime.ToReadableString()">
                                @upTime.ToTimeStringMini(3)
                                <label>Uptime</label>
                            </div>
                        }
                        @if (os.CPU != null)
                        {
                            var percentCpu = (100 - os.CPU.Idle).ToString();
                            <div class="value-block col-md-3 col-sm-6" title="System: @os.CPU.System.ToString()%, User: @os.CPU.User.ToString()%">
                                <div class="progress">
                                    <div class="progress-bar" style="width: @percentCpu%;"></div>
                                    <span>@percentCpu% @if (os.LoadAverage != null){<span class="smaller">(@string.Join(", ", os.LoadAverage))</span>}</span>
                                </div>
                                <label>CPU</label>
                            </div>
                        }
                        @if (os.Memory != null)
                        {
                            var totalMemory = os.Memory.ActualFreeInbytes + os.Memory.ActualUsedInBytes;
                            var percentMemoryUsed = 100 * os.Memory.ActualUsedInBytes / (decimal)totalMemory;
                            var percentUsed = decimal.Round(percentMemoryUsed, 2).ToString();
                            <div class="value-block col-md-3 col-sm-6">
                                <div class="progress">
                                    <div class="progress-bar" style="width: @percentUsed%;"></div>
                                    <span>@percentUsed% <span class="smaller">(@os.Memory.ActualUsedInBytes.ToSize(precision: 0) / @totalMemory.ToSize(precision: 0))</span></span>
                                </div>
                                <label>Memory</label>
                            </div>
                        }
                        @if (os.Swap != null)
                        {
                            <div class="value-block col-md-3 col-sm-6" title="@os.Swap.FreeInBytes.ToSize() free">
                                @os.Swap.UsedInBytes.ToSize() / @((os.Swap.UsedInBytes + os.Swap.FreeInBytes).ToSize())
                                <label>Swap</label>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (jvm != null)
            {
                var uptime = TimeSpan.FromMilliseconds(jvm.UptimeInMilliseconds);
                var gcTime = TimeSpan.FromMilliseconds(jvm.GC.CollectionTimeInMilliseconds);
                <div class="panel panel-default">
                    <div class="panel-heading">Java Virtual Machine <span class="small text-muted">(PID: @(cnd?.JVM.PID.ToString()))</span></div>
                    <div class="panel-body small">
                        <div class="value-block col-md-4 col-sm-6" title="@uptime.ToReadableString()">
                            @uptime.ToTimeStringMini(3)
                            <label>Uptime</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6">
                            @jvm.Memory.HeapUsedInBytes.ToSize() <span class="text-muted">(@jvm.Memory.HeapCommittedInBytes.ToSize() commit)</span>
                            <label>Heap</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6">
                            @jvm.Memory.NonHeapUsedInBytes.ToSize() <span class="text-muted">(@jvm.Memory.NonHeapCommittedInBytes.ToSize() commit)</span>
                            <label>Non-Heap</label>
                        </div>
                        <div class="value-block col-md-3 col-sm-6" title="
                             @foreach (var k in jvm.Memory.Pools.Keys) { var val = jvm.Memory.Pools[k]; <text>
                             @k
                             Used @val.Used (@val.PeakUsed peak)
                             Max @val.Max (@val.PeakMax peak)</text>
}">
                            @jvm.Memory.Pools.Keys.Count.ToComma()
                            <label>Pools</label>
                        </div>
                        <div class="value-block col-md-3 col-sm-6">
                            @jvm.Threads.Count.ToComma() <span class="text-muted">(@jvm.Threads.PeakCount.ToComma() peak)</span>
                            <label>Threads</label>
                        </div>
                        <div class="value-block col-md-3 col-sm-6">
                            @jvm.GC.CollectionCount.ToComma() <span class="text-muted" title="@gcTime.ToReadableString()">(@gcTime.ToTimeStringMini(4))</span>
                            <label>GC Runs</label>
                        </div>
                        <div class="value-block col-md-3 col-sm-6">
                            @(cnd?.JVM.Version)
                            <label>Version</label>
                        </div>
                    </div>
                </div>
            }
            @if (transport != null)
            {
                <div class="panel panel-default">
                    <div class="panel-heading">Network</div>
                    <div class="panel-body small">
                        <div class="value-block col-md-3 col-sm-6">
                            @(cnd?.Network?.PrimaryInterface?.Address)
                            <label>Address</label>
                        </div>
                        <div class="value-block col-md-3 col-sm-6">
                            @transport.ServerOpen.ToComma()
                            <label>Open Conns</label>
                        </div>
                        <div class="value-block col-md-3 col-sm-6">
                            @transport.RXSizeInBytes.ToSize()
                            <label>Received</label>
                        </div>
                        <div class="value-block col-md-3 col-sm-6">
                            @transport.TXSizeInBytes.ToSize()
                            <label>Sent</label>
                        </div>
                    </div>
                </div>
            }
            @if (fs?.Data != null)
            {
                <div class="panel panel-default">
                    <div class="panel-heading">File System Mounts</div>
                    <div class="panel-body small">
                        @foreach (var fsd in fs.Data)
                        {
                            var percentUsed = 100 * (fsd.TotalInBytes - fsd.AvailableInBytes) / (float)fsd.TotalInBytes;
                            <div class="value-block col-md-@(fs.Data.Length == 1 ? "12" : "6") col-sm-6" title="Mount: @fsd.Mount
Path: @fsd.Path
Queue: @fsd.DiskQueue

Total: @fsd.TotalInBytes.ToSize()
Free: @fsd.FreeInBytes.ToSize()
Available: @fsd.AvailableInBytes.ToSize()

Reads: @fsd.DiskReads.ToComma() (@fsd.DiskReadSizeInBytes.ToSize())
Writes: @fsd.DiskWrites.ToComma() (@fsd.DiskWriteSizeInBytes.ToSize())">
                                <div class="progress">
                                    <div class="progress-bar" style="width: @percentUsed.ToString()%;"></div>
                                    <span>@((fsd.TotalInBytes - fsd.AvailableInBytes).ToSize()) / @fsd.TotalInBytes.ToSize() <span class="smaller">(@fsd.AvailableInBytes.ToSize() free)</span></span>
                                </div>
                                <label>@fsd.Mount</label>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">Cluster Stats</div>
                <div class="panel-body small">
                    @{
                        var gs = c.IndexStats.Data?.All;
                    }
                    @if (gs == null)
                    {
                        <div class="no-content">No Indexes Found</div>
                    }
                    else
                    {
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Documents?.Count.ToComma())">
                            @(gs?.Total?.Documents?.Count.ToComma() ?? "Unknown")
                            <label>Docs</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Documents?.Deleted.ToComma())">
                            @(gs.Total?.Documents?.Deleted.ToComma() ?? "Unknown")
                            <label>Deleted Docs</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Search?.QueryTotal.ToComma())">
                            @(gs?.Total?.Search?.QueryTotal.ToComma() ?? "Unknown")
                            <label>Searches</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs.Primaries.Store.SizeInBytes.ToSize())">
                            @(gs?.Total?.Store?.SizeInBytes.ToSize() ?? "Unknown")
                            <label>Size</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Indexing?.Total.ToComma())">
                            @(gs?.Total?.Indexing?.Total.ToComma() ?? "Unknown")
                            <label>Indexed</label>
                        </div>
                        <div class="value-block col-md-4 col-sm-6" title="Primaries: @(gs?.Primaries?.Get?.Total.ToComma())">
                            @(gs?.Total?.Get?.Total.ToComma() ?? "Unknown")
                            <label>Gets</label>
                        </div>
                    }
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">Cluster Indexes <span class="small text-muted">(<a href="#/elastic/summary/indices">View Detail</a>)</span></div>
                <div class="panel-body small">
                    @{
                        var indexes = c?.HealthStatus?.Data?.Indices?.Values;
                        var indexStats = c.IndexStats.Data?.Indices;
                        if (indexStats?.Count > 0 && indexes != null && indexes.Any())
                        {
                            <table class="table table-striped table-hover table-super-condensed">
                                <thead>
                                    <tr>
                                        <th>Index</th>
                                        <th>Searches</th>
                                        <th>Docs <span class="text-muted">(Size) xCount</span></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var i in indexes.OrderByWorst().ThenBy(i => { int j; return int.TryParse(i.Name, out j) ? j : 0; }).ThenBy(i => i.Name))
                                    {
                                        ElasticCluster.IndexStatsInfo.IndexStats indexStat;
                                        indexStats.TryGetValue(i.Name, out indexStat);
                                        var alias = c.GetIndexAliasedName(i.Name);
                                        <tr title="Status: @i.Status
Name: @i.Name
Alias: @(alias == i.Name ? "none" : alias)
Shards: @i.NumberOfShards.ToComma()
Replicas: @i.NumberOfReplicas.ToComma()
Active: @i.ActiveShards.ToComma()
Active (Primary): @i.ActivePrimaryShards.ToComma()
Initializing: @i.InitializingShards.ToComma()
Relocating: @i.RelocatingShards.ToComma()
Unassigned: @i.UnassignedShards.ToComma() ">
                                            <td>
                                                @i.IconSpan()
                                                <a href="#/elastic/index/@i.Name/shards" class="@i.TextClass()">@alias</a>
                                            </td>
                                            @if (indexStat != null)
                                            {
                                                <td>@indexStat.Total.Search.QueryTotal.ToComma()</td>
                                                <td>@indexStat.Primaries.Documents.Count.ToComma() <span class="text-muted">(@indexStat.Primaries.Store.SizeInBytes.ToSize()) <span title="@i.NumberOfReplicas.Pluralize("replica")">x@(i.NumberOfReplicas + 1)</span></span></td>
                                            }
                                            else
                                            {
                                                <td colspan="2" class="text-muted">(no stats)</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div class="no-content">No stats available for existing indexes.</div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@switch (Model.Popup)
{
    case DashboardModel.Popups.Indices:
        @Html.Partial("Indices", Model)
        break;
}
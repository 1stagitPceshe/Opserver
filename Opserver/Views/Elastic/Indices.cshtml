@using StackExchange.Elastic
@model StackExchange.Opserver.Views.Elastic.DashboardModel
@{
    var c = Model.Current.Cluster;
    if (c == null) { return; }
    var hs = c.HealthStatus.SafeData(true);
    var warningsOnly = Model.WarningsOnly || Model.Current.WarningsOnly;
    var indices = (warningsOnly ? c.TroubledIndexes : c.HealthStatus.Data.Indices).ToList();
    var stats = c.Stats.SafeData(true);
}
<div class="js-refresh" data-name="elastic-indexes">
    @try
    {
        <h5 class="page-header">
            @c.IconSpan() @hs.Name: @indices.Count.Pluralize("Index") @(warningsOnly ? "in trouble" : "") on @hs.TotalNodeCount.Pluralize("node")
            <span class="small">(Updated @c.Stats.ToPollSpan())</span>
            @Helpers.PollNow(c)
        </h5>

        if (indices.Any())
        {
            <table class="table table-striped table-hover table-responsive table-super-condensed">
                <thead>
                    <tr>
                        <th></th>
                        <th>Name</th>
                        <th>Searches <span class="text-muted">(cur)</span></th>
                        <th>Docs <span class="text-muted">(deleted)</span></th>
                        <th>Size</th>
                        <th>Shards <span class="text-muted" title="Replicas">(repl)</span></th>
                        <th>Active <span class="text-muted" title="Primary Active Shards">(pri)</span></th>
                        <th title="Initializing">Init</th>
                        <th title="Relocating">Rel</th>
                        <th title="Unassigned">Un</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var i in indices.OrderByWorst().ThenBy(i =>
                    {
                        int j;
                        return int.TryParse(i.Name, out j) ? j : 0;
                    }).ThenBy(i => i.Name))
                    {
                        IndexStats iStats;
                        stats.Indices.TryGetValue(i.Name, out iStats);
                        <tr class="@i.RowClass()">
                            <td>@i.IconSpan()</td>
                            <td>@c.GetIndexAliasedName(i.Name)</td>
                            @if (iStats != null)
                        {
                                <td>@(iStats.Total.Search.QueryTotal.ToComma()) <span class="text-muted">(@(iStats.Total.Search.QueryCurrent.ToComma()))</span></td>
                                <td>@(iStats.Total.Documents.Count.ToComma()) <span class="text-muted">(@(iStats.Total.Documents.Deleted.ToComma()))</span></td>
                                <td>@(iStats.Total.Store.SizeInBytes.ToSize("b"))</td>
                            }
                            else
                            {
                                <td colspan="3" class="text-muted">(no stats)</td>
                            }
                            <td>@i.NumberOfShards.ToComma() <span class="text-muted">(@i.NumberOfReplicas.ToComma())</span></td>
                            <td>@i.ActiveShards.ToComma() <span class="text-muted">(@i.ActivePrimaryShards.ToComma())</span></td>
                            <td>@i.InitializingShards.ToComma()</td>
                            <td>@i.RelocatingShards.ToComma()</td>
                            <td>@i.UnassignedShards.ToComma()</td>
                        </tr>
                    }
                    @if (!warningsOnly)
                    {
                        var indexStats = stats.Indices?.Values;
                        <tr class="total-row">
                            <td></td>
                            <td><b>Total</b></td>
                            @if (indexStats != null)
                        {
                                <td>@(indexStats.Sum(i => i.Total.Search.QueryTotal).ToComma()) <span class="text-muted">(@(indexStats.Sum(i => i.Total.Search.QueryCurrent).ToComma()))</span></td>
                                <td>@indexStats.Sum(i => i.Total.Documents.Count).ToComma() <span class="text-muted">(@indexStats.Sum(i => i.Total.Documents.Deleted).ToComma())</span></td>
                                <td>@indexStats.Sum(i => i.Total.Store.SizeInBytes).ToSize("b")</td>
                            }
                            else
                            {
                                <td colspan="3" class="text-muted">(no stats)</td>
                            }
                            <td>@indices.Sum(i => i.NumberOfShards)  <span class="text-muted">(@indices.Sum(i => i.NumberOfReplicas))</span></td>
                            <td>@indices.Sum(i => i.ActiveShards) <span class="text-muted">(@indices.Sum(i => i.ActivePrimaryShards))</span></td>
                            <td>@indices.Sum(i => i.InitializingShards)</td>
                            <td>@indices.Sum(i => i.RelocatingShards)</td>
                            <td>@indices.Sum(i => i.UnassignedShards)</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else if (!warningsOnly)
        {
            <div class="no-content">No indexes found in the @c.Name cluster</div>
        }
    }
    catch (Exception e)
    {
        Current.LogException(e);
        <div class="no-content">Error showing indexes for @c.Name: @e.Message</div>
    }
</div>
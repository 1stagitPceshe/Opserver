@using StackExchange.Opserver.Data.Redis
@using StackExchange.Opserver.Views.Redis
@model DashboardModel
@{
    Model.Prep();
}
@helper ServerRole (RedisInfo.RedisInstanceRole role) {
    switch (role)
    {
        case RedisInfo.RedisInstanceRole.Master:
            <strong>Master</strong>
            break;
        case RedisInfo.RedisInstanceRole.Slave:
            <span>Slave</span>
            break;
        default:
            <span class="text-muted">Unknown</span>
            break;
    }
}
@helper CommonVersionHeader()
{
    if (Model.AllVersionsMatch)
    {
        @:(Version @Model.CommonVersion)
    }
}
@helper SectionHeader(List<RedisInstance> instances, string label, bool defaultHeaders = true)
{
    <tbody>
        <tr class="category-row">
            <th colspan="@(Model.AllVersionsMatch ? 8 : 9)">
                <h5>
                    @instances.GetWorstStatus().IconSpan()  @instances.Count.Pluralize(label)
                    <span class="small">@CommonVersionHeader()</span>
                    <span class="pull-right small"> @Helpers.PollNow(instances)</span>
                </h5>
            </th>
        </tr>
    </tbody>
    if (defaultHeaders)
    {
        <tbody>
            <tr>
                <th>Name</th>
                <th>Host <span class="text-muted small">(port - behind)</span></th>
                <th>Role</th>
                <th>Slaves</th>
                <th title="Operations">Ops <span class="text-muted small">(/sec)</span></th>
                <th>Memory <span class="text-muted small">(used)</span></th>
                <th>Clients</th>
                @if (!Model.AllVersionsMatch)
                {
                    <th>Version</th>
                }
                <th>As of</th>
            </tr>
        </tbody>
    }
}
@helper ServerRow (RedisInstance server, int nest = 0, long? toSync = null, string prevMaster = null) {
    var info = server.Info.SafeData();
    var isMissing = Model.Missing.Contains(server);
    <tr class="@(nest == 0 && server.Name != prevMaster && !isMissing ? "first-of-group " : "")@server.RowClass()">
        <td>
            @if (Current.User.IsRedisAdmin)
            {
                <a href="#/redis/actions/@server.HostAndPort" class="hover-spin">@Icon.Cog</a>
            }
            @server.ConnectionInfo.Name
        </td>
        <td style="padding-left: @((20*nest).ToString())px">
            @server.IconSpan()
            <a href="~/redis/instance?node=@server.HostAndPort" class="@server.TextClass()">@server.Host</a>
            <span class="text-muted small">(@server.Port.ToString()@if (toSync > 0){<span title="@toSync.Value.Pluralize("byte") behind master"> - @(toSync.Value.ToSize())</span>})</span>            
        </td>
        @if (isMissing)
        {
            <td class="text-muted">Missing</td>
            <td colspan="4" title="@server.Info.ErrorMessage" class="text-muted">@server.Info.ErrorMessage.TruncateWithEllipsis(100)</td>
        }
        else if (info != null)
        {
            <td>@ServerRole(server.Role)</td>
            var stats = info.Stats;
            <td>@server.SlaveCount.ToComma() @if(server.TotalSlaveCount > server.SlaveCount){<span class="text-muted small">(@((server.TotalSlaveCount - server.SlaveCount).ToComma()))</span>}</td>
            <td>@stats.TotalCommandsProcessed.ToComma() <span class="text-muted small">(@stats.InstantaneousOpsPerSec.ToComma())</span></td>
            <td>@info.Memory.UsedMemoryRSS.ToHumanReadableSize() <span class="text-muted small">(@info.Memory.UsedMemory.ToHumanReadableSize())</span></td>
            <td>@info.Clients.Connected.ToComma()</td>
        }
        else
        {
            <td>@ServerRole(server.Role)</td>
            <td colspan="4" class="text-muted">No data available</td>
        }
        @if (!Model.AllVersionsMatch)
        {
            <td>@server.Version</td>
        }
        <td>@server.Info.ToPollSpan()</td>
    </tr>
    if (Model.View != RedisViews.Server && server.SlaveCount > 0 && server.Replication != null)
    {
        foreach (var s in server.SlaveInstances)
        {
            if (s?.Replication == null) { continue; }
            @ServerRow(s, nest + 1, s.IsSlaving ? s.Replication.MastSyncLeftBytes : (s.Replication.SlaveReplicationOffset == 1 ? 0 : server.Replication.MasterReplicationOffset - s.Replication.SlaveReplicationOffset))
        }
    }
}
<div class="js-refresh" data-name="redis-overview">
    @if (Model.Slaving.Any())
    {
        <h5 class="page-header">
            @MonitorStatus.Warning.IconSpan() @Model.Slaving.Count.Pluralize("Slaving Instance") <span class="small">@CommonVersionHeader()</span>
            <span class="pull-right small"> @Helpers.PollNow(Model.Slaving)</span>
        </h5>
        <table class="table table-striped table-hover text-nowrap table-super-condensed table-responsive">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Master</th>
                    <th>Slave</th>
                    <th>Master Status</th>
                    <th>Link Status</th>
                    <th>Bytes Left</th>
                    @if (!Model.AllVersionsMatch){<th>Version</th>}
                    <th>As of</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in Model.Slaving)
                {
                    var master = s.Master;
                    <tr>
                        <td>@s.Name</td>
                        @if (master != null)
                        {
                            <td>
                                @master.IconSpan()
                                <a href="?node=@master.HostAndPort" class="@master.TextClass()">@master.Host</a> <span class="text-muted">(@master.Port.ToString())</span>
                            </td>
                        }
                        else
                        {
                            <td class="text-muted">Not Found</td>
                        }
                        <td>
                            @s.IconSpan()
                            <a href="?node=@s.HostAndPort" class="@s.TextClass()">@s.Host</a> <span class="text-muted">(@s.Port.ToString())</span>
                        </td>
                        @if (master != null)
                        {
                            var sc = master.SlaveConnections?.FirstOrDefault(sci => s.ConnectionInfo.IPAddresses.Any(ip => Equals(ip, sci.IPAddress)));
                            if (sc != null)
                            {
                                <td>@sc.Status</td>
                            }
                            else
                            {
                                <td class="text-muted">unknown</td>
                            }
                        }
                        else
                        {
                            <td class="text-muted">unknown</td>
                        }
                        <td>@s.Replication.MasterLinkStatus</td>
                        @switch (s.Replication.MastSyncLeftBytes)
                        {
                            case -1:
                                <td class="text-muted">n/a</td>
                                break;
                            case 0:
                                <td class="text-muted">unknown</td>
                                break;
                            default:
                                <td title="@s.Replication.MastSyncLeftBytes.ToComma() bytes left to replicate">@s.Replication.MastSyncLeftBytes.ToHumanReadableSize()</td>
                                break;
                        }
                        @if (!Model.AllVersionsMatch)
                        {
                            <td>@s.Version</td>
                        }
                        <td>@s.Info.ToPollSpan()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (Model.Instances.Any())
    {
        <table class="table table-striped table-hover text-nowrap table-super-condensed table-responsive">
            @if (Model.Missing.Any())
            {
                @SectionHeader(Model.Missing, "Missing Instance", false)
                <tbody>
                    <tr>
                        <th>Name</th>
                        <th>Host <span class="text-muted small">(port - behind)</span></th>
                        <th>Role</th>
                        <th colspan="4">Error</th>
                        @if (!Model.AllVersionsMatch)
                        {
                            <th>Version</th>
                        }
                        <th>As of</th>
                    </tr>
                </tbody>
                <tbody>
                    @foreach (var m in Model.Missing.OrderBy(m => m.Port).ThenBy(m => m.Name))
                    {
                        @ServerRow(m)
                    }
                </tbody>
            }
            @if (Model.Heads.Any())
            {
                @SectionHeader(Model.Heads, "Chained Instance")
                <tbody>
                    @{ var prevMaster = ""; }
                    @foreach (var m in Model.Heads)
                    {
                        @ServerRow(m, prevMaster: prevMaster)
                        prevMaster = m.Name;
                    }
                </tbody>
            }
            @if (Model.StandAloneMasters.Any())
            {
                @SectionHeader(Model.StandAloneMasters, "Standalone Instance")
                <tbody>
                    @foreach (var m in Model.StandAloneMasters.OrderBy(m => m.Port).ThenBy(m => m.Name))
                    {
                        @ServerRow(m)
                    }
                </tbody>
            }
            <tfoot>
                @{ var all = Model.Heads.Union(Model.Heads.SelectMany(h => h.GetAllSlavesInChain())).ToList(); }
                <tr class="total-row">
                    <td><strong>Total</strong> <span class="text-muted">(@all.Count.Pluralize("instance"))</span></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>@all.Sum(i => i.Info?.Data?.Stats?.TotalCommandsProcessed ?? 0).ToComma() <span class="text-muted small">(@all.Sum(i => i.Info?.Data?.Stats?.InstantaneousOpsPerSec ?? 0).ToComma())</span></td>
                    <td>@all.Sum(i => i.Info?.Data?.Memory?.UsedMemoryRSS ?? 0).ToHumanReadableSize() <span class="text-muted small">(@all.Sum(i => i.Info?.Data?.Memory?.UsedMemory ?? 0).ToHumanReadableSize())</span></td>
                    <td>@all.Sum(i => i.Info?.Data?.Clients.Connected ?? 0).ToComma()</td>
                    @if (!Model.AllVersionsMatch)
                    {
                        <td></td>
                    }
                    <td></td>
                </tr>
            </tfoot>
        </table>
    }
</div>
@using System.Reflection
@using StackExchange.Opserver.Data.Dashboard
@using StackExchange.Opserver.Data.Exceptions
@using StackExchange.Opserver.Data.HAProxy
@using StackExchange.Opserver.Data.SQL
@{
    this.SetPageTitle("About");

    var asm = Assembly.GetAssembly(typeof(GlobalApplication));
    var rev = asm.GetName().Version.ToString(4);
    var buildDate = new FileInfo(asm.Location).LastWriteTime.ToUniversalTime();
    var s = Current.Settings;
    var cacheStats = ExtensionMethods.GetGetSetStatistics();
    var pollingInfo = PollingEngine.GetPollingStatus();
}
@section head {
    <style>
        dl { margin-bottom: 0; }
    </style>
}
@helper EnabledSpan(bool enabled) {
    <span class="@(enabled ? "text-success" : "text-danger")">@(enabled ? "Enabled" : "Disabled")</span>
}
@helper EnabledLabel(string text, bool enabled) {
    <span class="label label-@(enabled ? "success" : "default")">@text</span>
}
<h5 class="page-header">
    @SiteSettings.SiteNameLong <span class="text-muted">(@SiteSettings.SiteName)</span>
</h5>
<div class="row">
    <div class="col-md-4">
        <div class="panel panel-default">
            <div class="panel-heading">Info</div>
            <div class="panel-body small">
                <div class="value-block col-xs-4">
                    @rev
                    <label>App Version</label>
                </div>
                <div class="value-block col-xs-4">
                    @buildDate.ToRelativeTimeSpan()
                    <label>Last Built</label>
                </div>
                <div class="value-block col-xs-4">
                    @GlobalApplication.StartDate.ToRelativeTimeSpan()
                    <label>Uptime</label>
                </div>
                <div class="value-block col-xs-6">
                    @Environment.MachineName
                    <label>Server</label>
                </div>
                <div class="value-block col-xs-6">
                    Sync: @cacheStats.Item1.ToComma(), Async: @cacheStats.Item2.ToComma(), Errored: @cacheStats.Item3.ToComma()
                    <label>Get-Set Cache</label>
                </div>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading">Sections</div>
            <div class="panel-body">
                @EnabledLabel("Dashboard", s.Dashboard.Enabled)
                @EnabledLabel("Exceptions", s.Exceptions.Enabled)
                @EnabledLabel("SQL", s.SQL.Enabled)
                @EnabledLabel("Redis", s.Redis.Enabled)
                @EnabledLabel("Elastic", s.Elastic.Enabled)
                @EnabledLabel("HAProxy", s.HAProxy.Enabled)
                @EnabledLabel("HAProxy Traffic", s.HAProxy.Traffic.Enabled)
                @EnabledLabel("TeamCity", s.TeamCity.Enabled)
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="panel panel-default">
            <div class="panel-heading">Polling</div>
            <div class="panel-body small">
                <div class="row">
                    <div class="value-block col-xs-4 @(pollingInfo.BackgroundClass())">
                        @(pollingInfo.IsAlive ? "Alive" : "Dead")
                        <label>Thread</label>
                    </div>
                    <div class="value-block col-xs-4">
                        @pollingInfo.StartTime.ToRelativeTimeSpan()
                        <label>Started</label>
                    </div>
                    <div class="value-block col-xs-4">
                        @(pollingInfo.LastPollAll?.ToRelativeTimeSpan())
                        <label>Last Poll</label>
                    </div>
                    <div class="value-block col-xs-4">
                        @pollingInfo.TotalPollers.ToComma()
                        <label>Pollers</label>
                    </div>
                    <div class="value-block col-xs-4">
                        @pollingInfo.TotalPollIntervals.ToComma()
                        <label>Poll Intervals</label>
                    </div>
                    <div class="value-block col-xs-4">
                        @pollingInfo.TotalPollers.ToComma()
                        <label>Caches <span class="text-muted">(<a href="/about/caches">view</a>)</span></label>
                    </div>
                </div>
                <h5 class="page-header">@pollingInfo.NodeCount.ToComma() Nodes</h5>
                <ul class="list-group">
                    @foreach (var ng in pollingInfo.NodeBreakdown)
                    {
                        <li class="list-group-item">
                            <span class="badge">@ng.Item2.ToComma()</span>
                            @ng.Item1.Name.Replace("StackExchange.Opserver.Data.", "")
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="panel panel-default">
            <div class="panel-heading">Security</div>
            <div class="panel-body small">
                <div class="value-block col-xs-4 @((SecuritySettings.Current.Enabled ? MonitorStatus.Good : MonitorStatus.Warning).BackgroundClass())">
                    @(SecuritySettings.Current.Enabled ? "Enabled" : "Disabled")
                    <label>Security</label>
                </div>
                <div class="value-block col-xs-4">
                    @Current.User.AccountName
                    <label>Current User</label>
                </div>
                <div class="value-block col-xs-4">
                    @Current.RequestIP
                    <label>Request IP</label>
                </div>
                
                <dl>
                    <dt>Current Roles</dt>
                    <dd>
                        @if (Current.User.IsGlobalAdmin)
                        {
                            <strong class="text-success">Global Admin</strong>
                        }
                        else
                        {
                            @Current.User.Role
                        }
                    </dd>
                    <dt>Internal Networks</dt>
                    <dd>@Current.Security.InternalNetworks.Count</dd>
                    <dt>Admins</dt>
                    <dd>@(SiteSettings.AdminGroups?.Replace(";", ", "))</dd>
                    <dt>Viewers</dt>
                    <dd>@(SiteSettings.ViewGroups?.Replace(";", ", "))</dd>
                </dl>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        @if (s.Dashboard.Enabled)
        {
            <div class="panel panel-default">
                <div class="panel-heading">Dashboard</div>
                <div class="panel-body">
                    @foreach (var p in DashboardData.DataProviders)
                    {
                        <h5 class="page-header">@p.IconSpan() @p.Name</h5>
                        <ul class="list-group">
                            <li class="list-group-item">
                                <span class="badge">@p.AllNodes.Count.ToComma()</span>
                                Nodes
                            </li>
                            <li class="list-group-item">
                                <span class="badge">@p.AllNodes.Sum(n => n.Interfaces?.Count).ToComma()</span>
                                Interfaces
                            </li>
                            <li class="list-group-item">
                                <span class="badge">@p.AllNodes.Sum(n => n.Volumes?.Count).ToComma()</span>
                                Volumes
                            </li>
                            <li class="list-group-item">
                                <span class="badge">@p.AllNodes.Sum(n => n.Apps?.Count).ToComma()</span>
                                Applications
                            </li>
                        </ul>
                    }
                </div>
            </div>
        }
    </div>
    @helper SQLInstanceList(SQLInstance instance)
    {
var props = instance.ServerProperties.SafeData(true);
var features = instance.ServerFeatures.SafeData();
    <li class="list-group-item" title="Features:
@if (features == null)
{
@:Error Fetching Features
}
else
{
<text>
sp_WhoIsActive: @features.HasSPWhoIsActive.ToString()
sp_Blitz: @features.HasSPBlitz.ToString()
sp_BlitzIndex: @features.HasSPBlitzIndex.ToString()
sp_AskBrent: @features.HasSPAskBrent.ToString()
</text>
}">
        @instance.IconSpan() <span class="value">@instance.Name</span> - @props.Version (@props.MachineName)
    </li>
}
    @if (s.SQL.Enabled)
    {
        var clusters = SQLCluster.AllClusters;
        var instances = SQLInstance.AllStandalone;
        <div class="col-md-4">
            <div class="panel panel-default panel-@instances.GetWorstStatus().RawClass(showGood: true)">
                <div class="panel-heading">SQL Instances</div>
                <div class="panel-body small">
                    <h5 class="page-header">@clusters.Count.Pluralize("Availability Group Cluster")</h5>
                    @foreach (var cluster in clusters)
                    {
                        <h6>@cluster.IconSpan() @cluster.Name</h6>
                        <ul class="list-group">
                            @foreach (var node in cluster.Nodes)
                            {
                                @SQLInstanceList(node)
                            }
                        </ul>
                    }

                    <h5 class="page-header">@instances.Count.Pluralize("Standalone Node")</h5>
                    <ul class="list-group">
                        @foreach (var instance in instances)
                        {
                            @SQLInstanceList(instance)
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
</div>
<div class="about">
    <section class="per-section-props">
        @if (s.Exceptions.Enabled)
        {
            var apps = ExceptionStores.Applications;
            <header class="properties">@ExceptionStores.MonitorStatus.IconSpan() Exceptions</header>
            <section class="properties">
                <ul>
                    @if (@s.Exceptions.AdminGroups.HasValue())
                    {
                        <li>Admins: <span class="value">@s.Exceptions.AdminGroups</span></li>
                    }
                    @if (@s.Exceptions.ViewGroups.HasValue())
                    {
                        <li>Viewers: <span class="value">@s.Exceptions.ViewGroups</span></li>
                    }
                    <li>Previews: <span class="value">@s.Exceptions.EnablePreviews</span></li>
                    <li>RecentSeconds: <span class="value">@s.Exceptions.RecentSeconds</span></li>
                    <li>WarningCount: <span class="value">@s.Exceptions.WarningCount</span></li>
                    <li>CriticalCount: <span class="value">@s.Exceptions.CriticalCount</span></li>
                    <li>WarningRecentCount: <span class="value">@s.Exceptions.WarningRecentCount</span></li>
                    <li>CriticalRecentCount: <span class="value">@s.Exceptions.CriticalRecentCount</span></li>
                    <li>
                        Stores: <span class="value">@s.Exceptions.Stores.Count</span>
                        <ul class="sub-list">
                            @foreach (var store in s.Exceptions.Stores)
                            {
                                var es = ExceptionStores.Stores.First(ess => ess.Name == store.Name);
                                <li>
                                    @es.LastFetch.IconSpan() <span class="value">@store.Name</span> - Timeout: @(store.QueryTimeoutMs.ToComma())ms - PollInterval: @(store.PollIntervalSeconds.ToComma())s
                                    <ul class="sub-list">
                                        @foreach (var app in apps.Where(a => a.StoreName == store.Name))
                                        {
                                            <li>@app.Name: <span class="value">@app.ExceptionCount</span></li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </li>
                </ul>
            </section>
        }
        @if (s.HAProxy.Enabled)
        {
            <header class="properties">@HAProxyGroup.AllGroups.GetWorstStatus().IconSpan() HAProxy</header>
            <section class="properties">
                <ul>
                    @if (@s.HAProxy.AdminGroups.HasValue())
                    {
                        <li>Admins: <span class="value">@s.HAProxy.AdminGroups</span></li>
                    }
                    @if (@s.HAProxy.ViewGroups.HasValue())
                    {
                        <li>Viewers: <span class="value">@s.HAProxy.ViewGroups</span></li>
                    }
                    <li>User: <span class="value">@s.HAProxy.User</span></li>
                    <li>Query Timeout: <span class="value">@s.HAProxy.QueryTimeoutMs</span></li>


                    <li>
                        Instances: <span class="value">@s.HAProxy.Instances.Count</span>
                        <ul class="sub-list">
                            @foreach (var hap in HAProxyGroup.AllGroups.SelectMany(g => g.Instances))
                            {
                                <li>@hap.IconSpan() <span class="value">@hap.Name</span> @hap.Url - Timeout: @(hap.QueryTimeoutMs.GetValueOrDefault().ToComma())ms</li>
                            }
                        </ul>
                    </li>
                </ul>
            </section>
        }
        @if (s.TeamCity.Enabled)
        {
            var projects = BuildStatus.GetAllProjects();
            var configs = BuildStatus.Configs;
            <header class="properties">TeamCity</header>
            <section class="properties">
                <ul>
                    <li>Url: <span class="value">@s.TeamCity.Url</span></li>
                    <li>User: <span class="value">@s.TeamCity.User</span></li>
                    <li>Fetch: <span class="value">@BuildStatus.LastFetch</span></li>
                    <li>Fetch Interval: <span class="value">@s.TeamCity.BuildFetchIntervalSeconds</span></li>
                    <li>Projects: <span class="value">@projects.Count</span></li>
                    <li>Build Configs: <span class="value">@configs.Count</span></li>
                    <li>
                        Build Mapped Servers: <span class="value">@s.TeamCity.ServerMaps.Count</span>
                        <ul class="sub-list">
                            @foreach (var map in s.TeamCity.ServerMaps)
                            {
                                <li>
                                    <span class="value">@map.Key</span>
                                    <ul class="sub-list">
                                        @foreach (var config in BuildStatus.GetBuildConfigsByServer(map.Key))
                                        {
                                            <li>@config.ProjectName - @config.Name (@config.Id)</li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </li>
                </ul>
            </section>
        }
    </section>

    <div class="bottom-links">
        <a href="~/">Home</a>
    </div>
</div>

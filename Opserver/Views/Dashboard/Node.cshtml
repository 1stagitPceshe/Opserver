@using StackExchange.Opserver.Data.Dashboard
@using StackExchange.Opserver.Models
@using StackExchange.Opserver.Views.Dashboard
@model NodeModel
@{
    var s = Model.CurrentNode;
    
    this.SetPageTitle((s?.PrettyName ?? "Unknown Node") + " Status");
    this.SetTopNodes(DashboardData.AllNodes, "Dashboard", Model.CurrentNode);
}
@section head {
    <script>
        $(function () {
            Status.Dashboard.init({ refresh: false });
            Status.Dashboard.Server.init({ nodeName: '@(s?.PrettyName)' });
        });
    </script>
}
@if (s == null)
{
    <div class="no-content">Node not found.</div>
    return;
}
<h5>
    <span title="Status: @s.Status.GetDescription()">@s.IconSpan()</span>
    @s.PrettyName
    @if (s.IsVM)
    {
        @:(Virtual - <a href="/dashboard/node?node=@s.VMHost.PrettyName&view=@CurrentStatusTypes.VMHost" class="node-name-link">@s.VMHost.PrettyName</a>)
    }
    @if (s.ManagementUrl.HasValue())
    {
        <span class="small text-muted">(<a href="@s.ManagementUrl" target="_blank">View in @s.DataProvider.Name</a>)</span>
    }
</h5>
<div class="panel panel-default">
    <div class="panel-body small">
        <div class="row">
            <div class="col-md-4">
                <dl>
                    @if (s.Manufacturer.HasValue())
                    {
                        <dt>Model</dt>
                        <dd>
                            @s.Manufacturer @s.Model
                            @if (s.ServiceTag.HasValue())
                            {
                                @: - <b>@s.ServiceTag</b>
                            }
                        </dd>
                    }
                    <dt>Type</dt>
                    <dd>@s.MachineType</dd>

                    <dt>CPU</dt>
                    <dd title="@s.ApplicationCPUTextSummary()">
                        @s.CPUStatusSpan()
                    </dd>

                    <dt>Memory</dt>
                    <dd title="@s.ApplicationMemoryTextSummary()">@s.MemoryStatusSpan()</dd>

                    <dt>Network</dt>
                    <dd title="@s.NetworkTextSummary()">@s.PrettyTotalNetwork()</dd>
                </dl>
            </div>
            <div class="col-md-4">
                <dl>
                    <dt>Last Boot</dt>
                    <dd>
                        @if (s.LastBoot == null)
                        {
                            <span class="text-warning">Unknown</span>
                        }
                        else
                        {
                            @(s.LastBoot?.ToRelativeTimeSpan())
                            <span class="text-muted">(@DateTime.UtcNow.ToRelativeTime(compareTo: s.LastBoot, asPlusMinus: true, includeSign: false) ago)</span>
                        }
                    </dd>

                    <dt>Last Poll</dt>
                    <dd>@s.LastUpdatedSpan()</dd>

                    @if (s.PollIntervalSeconds.HasValue)
                    {
                        <dt>Poll Interval</dt>
                        <dd>@(s.PollInterval?.ToReadableString())</dd>
                    }

                    <dt>Monitor</dt>
                    <dd title="All IPs: @(s.IPs != null ? $"\n{string.Join("\n", s.IPs)}" : null)">@s.Ip</dd>

                </dl>
            </div>
            @if (s.Volumes != null)
            {
                <div class="col-md-4">
                    @foreach (var v in s.Volumes.Where(vol => vol.IsDisk && vol.Size > 0))
                    {
                        <div title="@v.Description @($"\n{v.Used:n0}") of @($"{v.Size:n0}") bytes used">
                            @v.PrettyDescription - (@v.PrettyUsed / @v.PrettySize) - <span class="@v.SpaceStatus.TextClass()">@v.PercentFreeSpace()</span>
                        </div>
                        <div class="progress">
                            <div class="progress-bar @(v.SpaceStatus.ProgressBarClass())" style="width: @(v.PercentUsed)%"></div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>
@helper SubnavItem(CurrentStatusTypes st, string url, bool isExternal = true)
{
    <li class="@(Model.CurrentStatusType == st ? "active" : "")@(isExternal ? " exit-link" : null)"><a href="@url">@st.GetDescription()</a></li>
}
@if (Model.StatusTypes.Count() > 1)
{ // only show nav if there's actual nav - save the vertical space on stats-only nodes
     <ul class="nav nav-tabs">
         @foreach (var st in Model.StatusTypes.OrderBy(i => i))
         {
             switch (st)
             {
                 case CurrentStatusTypes.SQLInstance:
                     @SubnavItem(st, "/sql/instance?node=" + s.PrettyName)
                     break;
                 case CurrentStatusTypes.SQLActive:
                     @SubnavItem(st, "/sql/active?node=" + s.PrettyName)
                     break;
                 case CurrentStatusTypes.SQLTop:
                     @SubnavItem(st, "/sql/top?node=" + s.PrettyName)
                     break;
                 case CurrentStatusTypes.Redis:
                     @SubnavItem(st, "/redis?node=" + s.PrettyName)
                     break;
                 case CurrentStatusTypes.HAProxy:
                     @SubnavItem(st, "/haproxy")
                     break;
                 case CurrentStatusTypes.Elastic:
                     @SubnavItem(st, "/elastic" + s.PrettyName)
                     break;
                 default:
                     @SubnavItem(st, $"/dashboard/node?node={s.PrettyName}&view={st}")
                     break;
             }
         }
     </ul>
}
<div data-node="@Model.CurrentNode.PrettyName">
    @if (Model.CurrentStatusType != CurrentStatusTypes.None)
    {
        @Html.Partial("Node." + Model.CurrentStatusType, s)
    }
</div>

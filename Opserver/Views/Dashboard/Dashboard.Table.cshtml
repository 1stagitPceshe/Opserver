@using StackExchange.Profiling
@using StackExchange.Opserver.Data.Dashboard
@using StackExchange.Opserver.Models
@using StackExchange.Opserver.Views.Dashboard
@model DashboardModel
@{
    Layout = null;
    var categories = Model.Nodes
                          .GroupBy(n => n.Category)
                          .Where(g => g.Any() && (g.Key != DashboardCategory.Unknown || Current.Settings.Dashboard.ShowOther))
                          .OrderBy(g => g.Key.Index);
}
@helper Graph(Node s, string type)
{
    if (DashboardData.HasData)
    {
        <a href="#/dashboard/graph/@(s.Id.UrlEncode())/@type">
            <img src="/graph/@type.ToLower()/spark?id=@s.Id" alt="" />
        </a>
    }
    else
    {
        <div class="text-muted">No Data Available</div>
    }
}
<div class="js-refresh" data-name="dashboard-overview">
    @if (!Model.Nodes.Any())
    {
        var errors = Model.ErrorMessages;
        <div class="no-content">No nodes available</div>
        if (errors.Any())
        {
            <script>
                @foreach (var e in errors)
                {
                    @:toastr.warning('@HttpUtility.JavaScriptStringEncode(e)', null, { positionClass: "toast-bottom-full-width", timeOut: 60 * 1000 });
                }
            </script>
        }
    }
    else
    {
        <table class="table table-striped table-responsive table-middle table-super-condensed table-dashboard text-nowrap js-nodes">
            @foreach (var g in categories)
            {
                var c = g.Key;
                using (MiniProfiler.Current.Step("Category: " + c.Name))
                {
                    <tbody>
                        <tr class="category-row">
                            <th colspan="7">
                                <h5>@c.Name</h5>
                            </th>
                        </tr>
                        <tr>
                            <th>Node</th>
                            <th colspan="2">CPU</th>
                            <th colspan="2">Memory</th>
                            <th colspan="2">Network</th>
                        </tr>
                    @foreach (var n in g.OrderBy(n => n.PrettyName))
                    {
                        <tr class="@n.RowClass() @(n.IsVM ? " virtual-machine" : "")@(n.IsUnwatched ? " unwatched-row" : "")" data-search="@c.Name.ToLower()-@n.SearchString" data-node="@n.PrettyName">
                            <td title="@(n.IsVM ? "Virtual Machine hosted on " + n.VMHost.PrettyName + " " : "")Last Updated: @(n.LastSync?.ToRelativeTime())">
                                @n.IconSpan()
                                <a href="/dashboard/node?node=@n.PrettyName" class="@n.TextClass()">@n.PrettyName</a>
                            </td>
                            <td title="@n.ApplicationCPUTextSummary()">@n.CPUStatusSpan()</td>
                            <td>@Graph(n, "cpu")</td>
                            <td title="@n.ApplicationMemoryTextSummary()">
                                @n.MemoryStatusSpan()@if (n.MemoryUsed >= 0)
                                {
                                    <div class="progress" style="width: 215px;">
                                        <div class="progress-bar @n.MemoryMonitorStatus().ProgressBarClass()" style="width: @(n.PercentMemoryUsed.ToString())%"></div>
                                    </div>
                                }
                            </td>
                            <td>@Graph(n, "memory")</td>
                            <td title="@n.NetworkTextSummary()">@n.PrettyTotalNetwork()</td>
                            <td><a href="/dashboard/node?node=@n.PrettyName">@Graph(n, "network")</a></td>
                        </tr>
                    }
                    </tbody>
                }
            }
        </table>
    }
</div>
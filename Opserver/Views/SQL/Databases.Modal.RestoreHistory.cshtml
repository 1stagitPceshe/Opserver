@using StackExchange.Opserver.Views.SQL
@model DatabasesModel
@{
    Layout = "Databases.Modal.cshtml";
    var s = Model.Instance;
    var restoreList = s.GetRestoreHistory(Model.Database);
}
@if (restoreList.Data == null || !restoreList.LastPollSuccessful)
{
    <div class="alert alert-warning">
        <h5>There was an error fetching restore info from @s.Name for @Model.Database</h5>
        <p class="error-stack">@restoreList.ErrorMessage</p>
    </div>
}
else {
    <table class="table table-striped table-hover text-nowrap table-super-condensed table-responsive js-database-restore-log">
        <thead>
            <tr>
                <th>Restore date</th>
                <th>User</th>
                <th>Backup used</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var b in restoreList.Data.OrderByDescending(b => b.RestoreDate))
            {
                <tr>

                    <td>@(b.RestoreDate.ToRelativeTimeSpanMini())</td>
                    <td>@b.UserName</td>
                    <td title="@b.BackupUsed">@b.BackupUsed.TruncateWithEllipsis(75)</td>
                </tr>
            }
        </tbody>
        <tfoot>
            @if (!restoreList.Data.Any())
            {
                <tr>
                    <td colspan="6">
                        <div class="none-active">There aren't any info about restoration history.</div>
                    </td>
                </tr>
            }
        </tfoot>
    </table>
    <script>
        $(function () {
            $('.js-database-restore-log').tablesorter({
                headers: {
                    1: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    2: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    3: { sorter: 'dataVal', sortInitialOrder: 'desc' }
                }
            });
        });
    </script>
}
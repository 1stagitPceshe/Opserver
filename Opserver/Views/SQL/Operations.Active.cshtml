@using StackExchange.Profiling
@using StackExchange.Opserver.Data.Dashboard
@using StackExchange.Opserver.Data.SQL
@using StackExchange.Opserver.Views.SQL
@model OperationsActiveModel
@{
    var i = Model.CurrentInstance;
    if (i == null) { return; }
}
@helper SleepingSessions(SQLInstance.ActiveSearchOptions.ShowSleepingSessionOptions option, string label)
{
    var val = (int)option;
    <label><input type="radio" name="sleeping" value="@val.ToString()" @(option == Model.ActiveSearchOptions.IncludeSleepingSessions ? "checked " : "") /> @label</label>
}
@if (!(i.ServerFeatures.Data?.HasSPWhoIsActive ?? false))
{
    <div class="alert alert-warning">
        <h5>Oh no!</h5>
        <p>
            <code>sp_WhoIsActive</code> was not found or was not accessible on this SQL instance.<br />
            <a href="http://sqlblog.com/blogs/adam_machanic/archive/tags/sp_5F00_whoisactive/default.aspx">Please visit Adam Machanic's site to grab the latest copy.</a>
        </p>
    </div>
}
else
{
    Cache<List<SQLInstance.ActiveOperation>> activeOps;
    using (MiniProfiler.Current.Step(nameof(i.GetActiveOperations)))
    {
        activeOps = i.GetActiveOperations(Model.ActiveSearchOptions);
    }
    var enableDashboardLinks = Current.Settings.Dashboard.Enabled;
    if (activeOps.LastPollStatus == FetchStatus.Fail)
    {
        <h5>Unknown active queries on @i.Name</h5>
        <div class="alert alert-danger">
            <h5>There was an error fetching server status from @i.Name:</h5>
            <p class="error-stack">@activeOps.ErrorMessage</p>
        </div>
    }
    else
    {
        var data = activeOps.SafeData(true);
        <h5 class="page-header">
            Current active queries on @i.Name:
            <div class="filters-wrap" style="display: none;">
                <div class="filters-current">
                    <span class="filter-label">Sleeping: </span><span class="filter-value">@Model.ActiveSearchOptions.IncludeSleepingSessions.GetDescription()</span>
                    @if (Model.ActiveSearchOptions.GetAdditionalInfo)
                    {
                        <span class="filter-label">Details: </span><span class="filter-value">Yes</span>
                    }
                    @if (Model.ActiveSearchOptions.IncludeSystemSessions)
                    {
                        <span class="filter-label">System: </span><span class="filter-value">Yes</span>
                    }
                    @if (Model.ActiveSearchOptions.FilterValue.HasValue())
                    {
                        <span class="filter-label">@Model.ActiveSearchOptions.FilterField.GetDescription(): </span><span class="filter-value">@Model.ActiveSearchOptions.FilterValue</span>
                    }
                </div>
                <div class="filters">
                    <form class="filter-form" action="" method="GET">
                        <input type="hidden" name="text-muted" value="@Model.CurrentInstance.Name"/>
                        <div class="filters-header">Filters</div>
                        <div class="filter">
                            <label>Include Details: <input type="checkbox" @(Model.ActiveSearchOptions.GetAdditionalInfo ? "checked " : "") name="details" value="true"/></label>
                        </div>
                        <div class="filter">
                            <label>Include System Sessions: <input type="checkbox" @(Model.ActiveSearchOptions.IncludeSystemSessions ? "checked " : "") name="system" value="true"/></label>
                        </div>
                        <div class="filter">
                            Include Sleeping:
                            @SleepingSessions(SQLInstance.ActiveSearchOptions.ShowSleepingSessionOptions.None, "No")
                            @SleepingSessions(SQLInstance.ActiveSearchOptions.ShowSleepingSessionOptions.OpenTransaction, "Only Open Transctions")
                            @SleepingSessions(SQLInstance.ActiveSearchOptions.ShowSleepingSessionOptions.All, "Yes")
                        </div>
                        <div class="filter">
                            Search:
                            <select name="filterField">
                                @foreach (SQLInstance.ActiveSearchOptions.FilterFields e in Enum.GetValues(typeof (SQLInstance.ActiveSearchOptions.FilterFields)))
                                {
                                    <option value="@e.ToString()" @(e == Model.ActiveSearchOptions.FilterField ? "selected " : "")>@e.GetDescription()</option>
                                }
                            </select>
                            <input style="width: 240px;" type="text" value="@Model.ActiveSearchOptions.FilterValue" name="filterValue" placeholder="Search Text"/>
                        </div>
                        <button class="submit-button" type="submit">Apply</button>
                    </form>
                </div>
            </div>
            <span class="pull-right">
                @*<span class="text-muted"> | </span>*@
                <a href="#" class="js-reload-link">Reload</a>
            </span>
        </h5>
        if (data.Any(o => o.BlockingSessionId.HasValue))
        {
            <div class="critical-summary curved-section">
                <h5>Blocking Detected:</h5>
                <div>
                    <ul>
                        @helper BlockingTree(SQLInstance.ActiveOperation op, Dictionary<SQLInstance.ActiveOperation, List<SQLInstance.ActiveOperation>> blocked)
                        {
                            <li>
                                Session: <a href="#spid-@op.SessionId.ToString()">@op.SessionId.ToString()</a>
                                @if (blocked[op].Any())
                                {
                                    <ul>
                                        <li>Session: @string.Join(", ", blocked[op].Where(b => !blocked[b].Any()).Select(b => string.Format("<a href=\"#spid-{0}\">{0}</a>", b.SessionId))).AsHtml()</li>
                                        @foreach (var b in blocked[op].Where(bo => blocked[bo].Any()))
                                        {
                                            @BlockingTree(b, blocked)
                                        }
                                    </ul>
                                }
                            </li>
                        }
                        @{
                            var blocked = new Dictionary<SQLInstance.ActiveOperation, List<SQLInstance.ActiveOperation>>();
                            foreach (var op in data)
                            {
                                blocked[op] = data.Where(o => o.BlockingSessionId == op.SessionId).ToList();
                            }
                            // Iterate top level blockers
                            // TODO: Circular blocks
                            foreach (var op in data.Where(o => !o.BlockingSessionId.HasValue && blocked[o].Any()))
                            {
                                @BlockingTree(op, blocked)
                            }
                        }
                    </ul>
                </div>
            </div>
        }
        <table class="table table-striped table-hover text-nowrap table-super-condensed table-responsive">
            <thead>
                <tr>
                    <th>Session</th>
                    <th title="Operation Duration">Time</th>
                    <th>Stats</th>
                    <th></th>
                    <th></th>
                    <th>Status</th>
                    <th>Details</th>
                    <th>SQL Text</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var w in data)
            {
                <tr id="spid-@w.SessionId.ToString()">
                    <td>
                        @w.SessionId.ToString()
                    </td>
                    <td title="@w.Duration.ToReadableString()">@w.Duration.ToTimeStringMini()</td>
                    <td>
                        <div><span class="text-muted">CPU:</span> @w.CPU.ToComma()</div>
                        <div><span class="text-muted">Reads:</span> @w.Reads.ToComma()</div>
                        @if (w.PhysicalReads > 0)
                        {
                            <div><span class="text-muted">PhysReads:</span> @w.PhysicalReads.ToComma()</div>
                        }
                        <div><span class="text-muted">Writes:</span> @w.Writes.ToComma()</div>
                    </td>
                    <td colspan="2">
                        @if (w.TempDBCurrent > 0)
                        {
                            <div><span class="text-muted">Temp (Pages):</span> @w.TempDBCurrent.ToComma()</div>
                        }
                        @if (w.TempDBAllocations > 0)
                        {
                            <div><span class="text-muted">Temp (Writes):</span> @w.TempDBAllocations.ToComma()</div>
                        }
                        @if (w.WaitInfo.HasValue())
                        {
                            <div>
                                <span class="text-muted">Waits:</span><br/> @w.WaitInfo
                            </div>
                        }
                        @if (w.BlockingSessionId.HasValue)
                        {
                            <div>
                                <a href="#spid-@w.BlockingSessionId.ToString()"><span class="text-muted">Blocked By:</span> @w.BlockingSessionId</a>
                            </div>
                        }
                    </td>
                    <td title="@w.WaitInfo
                    % complete @(w.PercentComplete?.ToString() ?? "Unknown") ">
                        @w.Status
                        @if (w.PercentComplete.HasValue)
                        {
                            <div>@(w.PercentComplete.Value.ToString("##0.##"))<span class="text-muted">% done</span></div>
                        }
                    </td>
                    <td title="Program: @w.ProgramName">
                        <div>
                            <span class="text-muted">Host:</span>
                            @if (enableDashboardLinks && DashboardData.GetNodeByName(w.HostName) != null)
                            {
                                <a href="/dashboard/node?node=@w.HostName.UrlEncode()" class="node-name-link">@w.HostName</a>
                            }
                            else
                            {
                                @w.HostName
                            }
                        </div>
                        <div><span class="text-muted">DB:</span> @w.DatabaseName</div>
                        <div><span class="text-muted">Login:</span> @w.LoginName</div>
                    </td>
                    <td>
                        <div class="sql-block-wrap"><pre class="pre-code prettyprint lang-sql">@w.SqlText</pre></div></td>
                </tr>
            }
            @if (!data.Any())
            {
                <tr>
                    <td colspan="11">
                        <div class="text-muted">There are no active operations at the moment.</div></td>
                </tr>
            }
            </tbody>
        </table>
        if (data.Count < 25)
        {
            <script>prettyPrint();</script>
        }
    }
}
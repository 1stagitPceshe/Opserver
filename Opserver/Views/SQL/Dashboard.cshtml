@using StackExchange.Opserver.Data.SQL
@using StackExchange.Opserver.Views.SQL
@model DashboardModel
@{
    Layout = "~/Views/Shared/Master.cshtml";
    this.SetPageTitle("SQL Dashboard");
    this.SetTopNodes(SQLInstance.AllInstances, "SQL", Model.CurrentInstance, Model.View == SQLViews.Servers ? "/sql/instance" : null);
}
@section head {
    <script>
        $(function() {
            Status.Dashboard.init({ refresh: @(Model.Refresh.ToString()) });
            Status.SQL.init({ node: '@(Model.CurrentInstance != null ? Model.CurrentInstance.Name : "")' });
        });
    </script>
}
@helper TabLink(SQLViews view, string href, string name, bool includeParams = true)
{
    <li class="@(Model.View == view ? "active" : null)"><a href="@href@(includeParams && Model.CurrentInstance != null ? "?node=" + Model.CurrentInstance.Name.UrlEncode() : null)">@name</a></li>
}
<ul class="nav nav-tabs nav-tabs-right">
    @TabLink(SQLViews.Servers, "/sql/servers", "all servers", false)
    @TabLink(SQLViews.Instance, "/sql/instance", "instance")
    @TabLink(SQLViews.Top, "/sql/top", "top")
    @TabLink(SQLViews.Active, "/sql/active", "active")
    @TabLink(SQLViews.Connections, "/sql/connections", "connections")
    @TabLink(SQLViews.Databases, "/sql/databases", "databases")
</ul>
<div>
    @if (Model.View != SQLViews.Servers && Model.CurrentInstance == null)
    {
        @Html.Partial("Instance.Selector")
    }
    @RenderBody()
</div>